Bitmap header
All integers stored in LE format
Size 2 bytes - readInt16LE
Size 4 bytes - readInt32LE
Offset 0    Size 2 bytes    'BM' in ASCII encoding (42 4D)
Offset 2    Size 4 bytes    Bitmap size in bytes
Offset 10   Size 4 bytes    Bitmap image data / pixel array address/offset/location

DIB HEADER - starts @ offset 14

Offset 14   Size 4 bytes    HEADER_SIZE
Offset 18   Size 4 bytes    WIDTH
Offset 22   Size 4 bytes    HEIGHT

Offset 28   Size 2 bytes    BIT_COUNT; if >= 16, means pixels will store thier own color information; usually 1, 4, 8, 16, 24, and 32

Offset 30   Size 4 bytes    Compression method
    0   None (most common)  No compression
    1   RLE 8-bit/pix
    2   RLE 4-bit/pix
    3   RGB Bitfield masks  No compression
    4   JPEG
    5   PNG
    6   RGBA bitfield masks

Offset 34   Size 4 bytes    Size of raw bitmap data

Offset 46   Size 4 bytes    Number of colors in the palette
    Ignore if BIT_COUNT >= 16 and work with the pixels

Color table
Offset = 14 + HEADER_SIZE
Number of entries is 2^BIT_COUNT
Each entry is 4 bytes   B G R 0

If BIT_COUNT < 16, each pixel is a BIT_COUNT # of bytes which points to an entry in the color table

16-bit images can be either 5 bits per color or 6 bits for green.
5 bits each:                6-bit green:
length is 15 max
white   0111111111111111    1111111111111111
black   0000000000000000    0000000000000000
red     0111110000000000    1111100000000000
green   0000001111100000    0000011111100000
blue    0000000000011111    0000000000011111



PIXEL STORAGE
Stored in rows of size: CEIL(BIT_COUNT * WIDTH / 32) * 4 bytes, each row padded up to a 4-byte multiple (little endian); width % 4 gives the number of bytes to pad each row with

1-bpp info is stored in exact order. Each byte has 8 bits, representing 8 pixels in order from left-to-right
